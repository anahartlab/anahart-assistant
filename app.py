from fastapi import FastAPI, Request
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
import json
import os
import httpx

app = FastAPI()

# –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è GitHub Pages
app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://anahartlab.github.io"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–∞–ø–∫—É —Å–æ —Å—Ç–∞—Ç–∏–∫–æ–π
app.mount("/static", StaticFiles(directory="static"), name="static")

# –û—Ç–¥–∞—á–∞ assistant.html –ø–æ –ø—É—Ç–∏ /assistant
@app.get("/assistant", response_class=HTMLResponse)
async def serve_assistant():
    with open("static/assistant.html", "r", encoding="utf-8") as f:
        return HTMLResponse(content=f.read(), status_code=200)


# –†–µ–¥–∏—Ä–µ–∫—Ç —Å –∫–æ—Ä–Ω—è –Ω–∞ /assistant
@app.get("/")
async def root():
    return RedirectResponse(url="/assistant")

@app.post("/assistant")
async def assistant_post(request: Request):
    data = await request.json()
    user_message = data.get("message", "")

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ò–ò
    keywords = await extract_keywords(user_message)
    if not keywords:
        keywords = user_message.split()

    # –ò—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    query = " ".join(keywords)
    found = find_products(query)

    if found:
        reply = "–í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª:\n"
        for p in found:
            reply += f"- {p['title']} (–≤ –Ω–∞–ª–∏—á–∏–∏: {p.get('stock', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')})\n"
            if "link" in p:
                reply += f"  –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {p['link']}\n"
        return {"reply": reply}

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî —à–∞–±–ª–æ–Ω
    fallback_message = (
        "ü§ñ –í —Å–≤—è–∑–∏ —Å –±–æ–ª—å—à–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –ò–ò –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–æ.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã –∑–¥–µ—Å—å:\n"
        "üåÄ <a href=\"https://anahartlab.github.io/wear.html\" target=\"_blank\">–û–¥–µ–∂–¥–∞</a>\n"
        "üåà <a href=\"https://anahartlab.github.io/tapestries/instock.html\" target=\"_blank\">–ü–æ–ª–æ—Ç–Ω–∞</a>\n"
        "üì© <a href=\"https://t.me/anahart\" target=\"_blank\">–ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram</a>"
    )
    return {"reply": fallback_message}

# –ó–∞–≥—Ä—É–∂–∞–µ–º products.json –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
with open(os.path.join("static", "products.json"), "r", encoding="utf-8") as f:
    products = json.load(f)

OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")


# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ OpenRouter
async def extract_keywords(message: str) -> list[str]:
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
    }
    prompt = (
        "–ò–∑–≤–ª–µ–∫–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.\n"
        "–û—Ç–≤–µ—Ç –≤–µ—Ä–Ω–∏ –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤, –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞. –ü—Ä–∏–º–µ—Ä: ['—Ñ—É—Ç–±–æ–ª–∫–∞', '–±—É–¥–¥–∞']\n\n"
        f"–ó–∞–ø—Ä–æ—Å: {message}"
    )
    data = {
        "model": "mistralai/mistral-7b-instruct",
        "messages": [{"role": "user", "content": prompt}],
    }
    async with httpx.AsyncClient() as client:
        response = await client.post(url, headers=headers, json=data)
        response.raise_for_status()
        json_data = response.json()
        content = json_data.get("choices", [{}])[0].get("message", {}).get("content", "")
        try:
            keywords = eval(content.strip())
            return keywords if isinstance(keywords, list) else []
        except:
            return []

import re

def normalize(text):
    return re.sub(r"[^\w\s]", "", text.lower())

def find_products(query: str):
    query_words = normalize(query).split()
    results = []

    for product in products:
        searchable = " ".join([
            normalize(product.get("name", "")),
            normalize(product.get("title", "")),
            normalize(product.get("description", ""))
        ])
        if all(word in searchable for word in query_words):
            results.append(product)

    return results[:5]

@app.post("/api/chat")
async def chat(request: Request):
    data = await request.json()
    user_message = data.get("message", "")
    found = find_products(user_message)

    if found:
        reply = "–í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª:\n"
        for p in found:
            reply += f"- {p['title']} (–≤ –Ω–∞–ª–∏—á–∏–∏: {p.get('stock', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')})\n"
            if "link" in p:
                reply += f"  –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {p['link']}\n"
        return {"reply": reply}

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    fallback_message = (
        "ü§ñ –í —Å–≤—è–∑–∏ —Å –±–æ–ª—å—à–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –ò–ò –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–æ.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã –∑–¥–µ—Å—å:\n"
        "üåÄ –û–¥–µ–∂–¥–∞: https://anahartlab.github.io/wear.html\n"
        "üåà –ü–æ–ª–æ—Ç–Ω–∞: https://anahartlab.github.io/tapestries/instock.html\n"
        "üì© –ò–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Ö—É–¥–æ–∂–Ω–∏–∫—É –Ω–∞–ø—Ä—è–º—É—é –≤ Telegram: https://t.me/anahart"
    )
    return {"reply": fallback_message}