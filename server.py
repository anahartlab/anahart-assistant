from flask import Flask, request, jsonify
import json
import os
import openai

app = Flask(__name__)
openai.api_key = os.environ.get("OPENROUTER_API_KEY")

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã
with open("products.json", "r", encoding="utf-8") as f:
    products = json.load(f)

def find_products(query):
    query_lower = query.lower()
    results = []
    for p in products:
        if (query_lower in p["name"].lower()
            or query_lower in p["title"].lower()
            or query_lower in p["description"].lower()):
            results.append(p)
    return results[:5]

@app.route("/api/chat", methods=["POST"])
def chat():
    data = request.get_json()
    user_message = data.get("message", "")

    found = find_products(user_message)
    if found:
        reply = "–í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª:
"
        for p in found:
            reply += f'‚Äì {p["title"]} ({p["stock"]})
üëâ <a href="{p["link"]}" target="_blank">–°–º–æ—Ç—Ä–µ—Ç—å</a>

'
    else:
        # fallback to GPT
        gpt_response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ANAHART. –û—Ç–≤–µ—á–∞–π –≤–µ–∂–ª–∏–≤–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É."},
                {"role": "user", "content": user_message}
            ]
        )
        reply = gpt_response.choices[0].message["content"]

    return jsonify({"reply": reply})
